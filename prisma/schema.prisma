generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  senha          String
  tipo_chave_pix String
  chave_pix      String
  recoverToken   String?
  cliente        cliente[]
  produto        produto[]
}

model cliente {
  id_cliente String   @id @default(uuid())
  nome       String
  email      String   @unique
  telefone   String
  userId     String // Chave estrangeira (FK)
  User       User     @relation(fields: [userId], references: [id]) // Relacionamento
  pedido     pedido[]
}

model produto {
  id_produto         String               @id @default(uuid())
  codigo_produto     String
  descricao_produto  String
  fabricante         String
  custo              Decimal
  preco_distribuidor Decimal
  preco_lojista      Decimal
  quantidade_total   Int
  quantidade_minima  Int
  userId             String // Chave estrangeira (FK)
  User               User                 @relation(fields: [userId], references: [id]) // Relacionamento
  pedidos            pedidoProduto[] // Relacionamento
  Compras            entradaProdutoItem[] // Relacionamento
  EstoqueLog         estoqueLog[]
}

model pedido {
  id_pedido                 String          @id @default(uuid())
  tipo_cliente              String
  preco_total               Decimal
  custo_total               Decimal
  lucro_bruto               Decimal
  desconto                  Decimal
  motivo_desconto           String
  preco_final               Decimal
  status_pedido             String
  quantidade_total_produtos Int
  clienteId                 String // Chave estrangeira (FK)
  cliente                   cliente         @relation(fields: [clienteId], references: [id_cliente]) // Relacionamento
  createdAt                 DateTime        @default(now())
  produtos                  pedidoProduto[] // Relacionamento com produtos
  pedidoLog                 pedidoLog[] // Relacionamento com produtos
}

model pedidoProduto {
  id_pedido_produto String  @id @default(uuid())
  pedidoId          String // Chave estrangeira (FK)
  Pedido            pedido  @relation(fields: [pedidoId], references: [id_pedido])
  produtoId         String // Chave estrangeira (FK)
  Produto           produto @relation(fields: [produtoId], references: [id_produto])
  quantidade        Int // Quantidade do produto no pedido
  preco_venda       Decimal // Aqui é o preco que vai gerar conforme a escolha se lojista ou distribuidor
  total_produto     Decimal // aqui é a qtde vezes o preco_venda
}

model compras {
  id_compras         String               @id @default(uuid())
  fornecedor         String
  valor_total_compra Decimal
  status_compra      String               @default("pedido iniciado")
  createdAt          DateTime             @default(now())
  itens              entradaProdutoItem[]
}

model entradaProdutoItem {
  id_item_entrada String  @id @default(uuid())
  comprasId       String // Chave estrangeira (FK)
  Compras         compras @relation(fields: [comprasId], references: [id_compras])
  produtoId       String // Chave estrangeira (FK)
  Produto         produto @relation(fields: [produtoId], references: [id_produto])
  custo           Decimal // custo do produto na entrada
  quantidade      Int // Quantidade do produto na entrada
  total_item      Decimal // custo * quantidade
}

model estoqueLog {
  id         String   @id @default(uuid())
  produtoId  String // Chave estrangeira (FK)
  Produto    produto  @relation(fields: [produtoId], references: [id_produto])
  quantidade Int
  tipo       String // ENTRADA, SAIDA OU AJUSTE
  descricao  String?
  createdAt  DateTime @default(now())
}

model pedidoLog {
  id              String   @id @default(uuid())
  pedidoId        String // Chave estrangeira (FK)
  Pedido          pedido   @relation(fields: [pedidoId], references: [id_pedido])
  status_anterior String
  novo_status     String
  descricao       String?
  createdAt       DateTime @default(now())
}
